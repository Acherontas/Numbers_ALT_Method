#include "gen_alt.h"
#include "sum_cdi.h"

gen_alt::gen_alt(){}//ctor
gen_alt::~gen_alt(){}//dtor
gen_alt::gen_alt(const gen_alt& other){}//copy ctor
// handle self assignment//assignment operator
gen_alt& gen_alt::operator=(const gen_alt& rhs){if (this == &rhs) return *this; return *this;}


struct st{long long int a;};

struct mt{long long int m;};

int gen_alt::g_a(long long int nmb){
  sum_cdi *smcd =new sum_cdi();
  string mlki;
  mlki.clear();
  mlki+=to_string(nmb);
  int mki=0;
  mki=mlki.size()-1;

  char ck;
  int lk=0;
  int xk=0;

  struct st ast[mki];

  for(int i=0;i<=mki;i++){
     cout<< mlki.at(i) << " ";
     ck=mlki.at(i);
     lk=stoi(&ck);
     ast[i].a=lk;
  }
  cout<<"\n";
  
  struct mt mmt[110];
  int rtsm=0;
  int xop=0;
  for(int i=0;i<=mki;i++){
     for(int j=ast[i].a;j<=110;j++){
       smcd->cdi=0;
       rtsm=0;
       rtsm=smcd->cdis(j,0);
       if(rtsm==j){mmt[rtsm]}
     }
  }




return 0;
}
